#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <winsock2.h>
#include <windows.h>
#include <locale.h>

#pragma comment(lib, "ws2_32.lib")

#define BOARD_IP "192.168.1.10"
#define BOARD_PORT 12345
#define BUFFER_SIZE 1024

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ Windows
void setup_console_encoding() {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8
    setlocale(LC_ALL, "ru_RU.UTF-8");

    // –î–ª—è Windows —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ –≤ UTF-8
    SetConsoleOutputCP(65001);
    SetConsoleCP(65001);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED);
}

void print_menu() {
    printf("\n");
    printf("=================================================\n");
    printf("        –ö–õ–ò–ï–ù–¢ –î–õ–Ø –ü–õ–ê–¢–´ NEXYS 4 DDR\n");
    printf("=================================================\n");
    printf("–ö–æ–º–∞–Ω–¥—ã:\n");
    printf("  <—Å–ª–æ–≤–æ>    - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –Ω–∞ –ø–ª–∞—Ç—É\n");
    printf("  test       - –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤\n");
    printf("  clear      - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω\n");
    printf("  help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n");
    printf("  quit       - –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n");
    printf("=================================================\n");
}

void print_colored(const char* text, int color) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, color);
    printf("%s", text);
    SetConsoleTextAttribute(hConsole, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED);
}

int send_to_board(SOCKET sock, const char* word, char* response) {
    char buffer[BUFFER_SIZE];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –Ω–∞ –ø–ª–∞—Ç—É
    sprintf(buffer, "%s\n", word);
    if (send(sock, buffer, strlen(buffer), 0) == SOCKET_ERROR) {
        print_colored("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö!\n", FOREGROUND_RED);
        return 0;
    }

    print_colored(">> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ", FOREGROUND_GREEN);
    printf("'%s'\n", word);

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–ª–∞—Ç—ã
    int bytes_received = recv(sock, buffer, BUFFER_SIZE - 1, 0);
    if (bytes_received > 0) {
        buffer[bytes_received] = '\0';

        // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        char* newline = strchr(buffer, '\n');
        if (newline) *newline = '\0';
        newline = strchr(buffer, '\r');
        if (newline) *newline = '\0';

        strcpy(response, buffer);

        print_colored("<< –ü–æ–ª—É—á–µ–Ω–æ: ", FOREGROUND_BLUE);
        printf("'%s'\n", response);
        return 1;
    }

    print_colored("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø–ª–∞—Ç—ã!\n", FOREGROUND_RED);
    return 0;
}

void test_suite(SOCKET sock) {
    // –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–ª–æ–≤ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ)
    char* test_words[] = {
        "Hello",
        "World",
        "TEST",
        "MiXeD",
        "123Numbers",
        "–ü—Ä–∏–≤–µ—Ç",
        "–¢–µ—Å—Ç",
        "–†—É—Å—Å–∫–∏–π",
        NULL
    };

    printf("\n");
    print_colored("=== –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –ù–ê–ë–û–†–ê ===\n", FOREGROUND_GREEN | FOREGROUND_BLUE);

    for (int i = 0; test_words[i] != NULL; i++) {
        char response[BUFFER_SIZE];
        printf("\n–¢–µ—Å—Ç %d: ", i + 1);

        if (send_to_board(sock, test_words[i], response)) {
            print_colored("–£–°–ü–ï–•", FOREGROUND_GREEN);
            printf(" - '%s' -> '%s'", test_words[i], response);
        } else {
            print_colored("–û–®–ò–ë–ö–ê", FOREGROUND_RED);
            printf(" - '%s'", test_words[i]);
        }

        Sleep(300); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }

    printf("\n\n");
    print_colored("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===\n", FOREGROUND_GREEN | FOREGROUND_BLUE);
}

void clear_screen() {
    system("cls");
}

void print_status(SOCKET sock, int is_connected) {
    printf("\n");
    print_colored("=== –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ===\n", FOREGROUND_GREEN);

    if (is_connected) {
        print_colored("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ", FOREGROUND_GREEN);
        printf("–ê–ö–¢–ò–í–ù–û\n");
        print_colored("–ê–¥—Ä–µ—Å –ø–ª–∞—Ç—ã: ", FOREGROUND_GREEN);
        printf("%s:%d\n", BOARD_IP, BOARD_PORT);
    } else {
        print_colored("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ", FOREGROUND_RED);
        printf("–ù–ï–¢\n");
    }

    print_colored("–ü—Ä–æ—Ç–æ–∫–æ–ª: ", FOREGROUND_GREEN);
    printf("TCP\n");
    print_colored("–ü–æ—Ä—Ç: ", FOREGROUND_GREEN);
    printf("%d\n", BOARD_PORT);
}

int main() {
    WSADATA wsaData;
    SOCKET client_socket;
    struct sockaddr_in server_addr;
    char input[256];
    char response[BUFFER_SIZE];
    int is_connected = 0;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
    setup_console_encoding();

    printf("–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–ª–∞—Ç—ã Nexys 4 DDR\n");
    printf("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞\n\n");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        print_colored("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Winsock!\n", FOREGROUND_RED);
        return 1;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
    client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket == INVALID_SOCKET) {
        print_colored("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–∫–µ—Ç–∞!\n", FOREGROUND_RED);
        WSACleanup();
        return 1;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(BOARD_PORT);
    server_addr.sin_addr.s_addr = inet_addr(BOARD_IP);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–ª–∞—Ç–µ
    print_colored("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–ª–∞—Ç–µ ", FOREGROUND_GREEN);
    printf("%s:%d...\n", BOARD_IP, BOARD_PORT);

    if (connect(client_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == SOCKET_ERROR) {
        print_colored("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–ª–∞—Ç–µ!\n", FOREGROUND_RED);
        print_colored("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n", FOREGROUND_YELLOW);
        printf("  1. –ü–ª–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n");
        printf("  2. IP-–∞–¥—Ä–µ—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: %s\n", BOARD_IP);
        printf("  3. –ü–æ—Ä—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: %d\n", BOARD_PORT);
        printf("  4. –°–µ—Ç–µ–≤–æ–π –∫–∞–±–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω\n");

        closesocket(client_socket);
        WSACleanup();

        printf("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
        getchar();
        return 1;
    }

    is_connected = 1;
    print_colored("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–ª–∞—Ç–µ!\n\n", FOREGROUND_GREEN);

    print_menu();

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    while (1) {
        printf("\n");
        print_colored("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É: ", FOREGROUND_YELLOW);

        if (fgets(input, sizeof(input), stdin) == NULL) {
            break;
        }

        // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        input[strcspn(input, "\n")] = 0;

        if (strlen(input) == 0) {
            continue;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (strcmp(input, "quit") == 0 || strcmp(input, "exit") == 0) {
            print_colored("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...\n", FOREGROUND_YELLOW);
            break;
        }
        else if (strcmp(input, "test") == 0) {
            test_suite(client_socket);
        }
        else if (strcmp(input, "clear") == 0) {
            clear_screen();
            print_menu();
        }
        else if (strcmp(input, "help") == 0) {
            print_menu();
        }
        else if (strcmp(input, "status") == 0) {
            print_status(client_socket, is_connected);
        }
        else {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ –ø–ª–∞—Ç—É
            if (send_to_board(client_socket, input, response)) {
                printf("\n");
                print_colored("üîÅ –†–ï–ó–£–õ–¨–¢–ê–¢: ", FOREGROUND_CYAN);
                printf("'%s' -> '%s'\n", input, response);
            } else {
                print_colored("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –Ω–∞ –ø–ª–∞—Ç—É\n", FOREGROUND_RED);
            }
        }
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    print_colored("\n–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...\n", FOREGROUND_YELLOW);
    closesocket(client_socket);
    WSACleanup();

    print_colored("–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n", FOREGROUND_GREEN);
    printf("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
    getchar();

    return 0;
}
