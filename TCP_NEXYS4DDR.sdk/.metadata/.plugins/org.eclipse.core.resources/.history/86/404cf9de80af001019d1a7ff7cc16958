#include <stdio.h>
#include "xparameters.h"
#include "netif/xadapter.h"
#include "platform.h"
#include "platform_config.h"
#include "lwip/tcp.h"
#include "xil_cache.h"
#include "console_app.h"  // Новый заголовочный файл для консоли

#if LWIP_IPV6==0
#if LWIP_DHCP==1
#include "lwip/dhcp.h"
#endif
#endif

/* Новые функции для нашего приложения */
void start_custom_application(void);
void process_received_data(char *data, int length);
void send_processed_data(struct tcp_pcb *pcb, char *data, int length);

/* Глобальные переменные */
static struct netif server_netif;
struct netif *custom_netif;

#if LWIP_IPV6==0
#if LWIP_DHCP==1
volatile int dhcp_timoutcntr = 24;
#endif
#endif

volatile int TcpFastTmrFlag = 0;
volatile int TcpSlowTmrFlag = 0;

void print_ip_settings(ip_addr_t *ip, ip_addr_t *mask, ip_addr_t *gw)
{
    xil_printf("Board IP: %d.%d.%d.%d\n\r",
               ip4_addr1(ip), ip4_addr2(ip), ip4_addr3(ip), ip4_addr4(ip));
    xil_printf("Netmask : %d.%d.%d.%d\n\r",
               ip4_addr1(mask), ip4_addr2(mask), ip4_addr3(mask), ip4_addr4(mask));
    xil_printf("Gateway : %d.%d.%d.%d\n\r",
               ip4_addr1(gw), ip4_addr2(gw), ip4_addr3(gw), ip4_addr4(gw));
}

int main()
{
#if LWIP_IPV6==0
    ip_addr_t ipaddr, netmask, gw;
#endif
    unsigned char mac_ethernet_address[] = { 0x00, 0x0a, 35, 0x00, 0x01, 0x02 };

    custom_netif = &server_netif;

    init_platform();

#if LWIP_IPV6==0
#if LWIP_DHCP==1
    ipaddr.addr = 0;
    gw.addr = 0;
    netmask.addr = 0;
#else
    /* Настройка статического IP */
    IP4_ADDR(&ipaddr,  192, 168,   1, 10);
    IP4_ADDR(&netmask, 255, 255, 255,  0);
    IP4_ADDR(&gw,      192, 168,   1,  1);
#endif
#endif

    /* ИНИЦИАЛИЗАЦИЯ КОНСОЛИ */
    console_init();

    xil_printf("\r\n=== Гибридное приложение ===\r\n");
    xil_printf("Режим: TCP-сервер + Консоль\r\n");
    xil_printf("Консоль готова к работе\r\n");

    lwip_init();

#if (LWIP_IPV6 == 0)
    /* Добавляем сетевой интерфейс */
    if (!xemac_add(custom_netif, &ipaddr, &netmask,
                    &gw, mac_ethernet_address,
                    PLATFORM_EMAC_BASEADDR)) {
        xil_printf("Error adding N/W interface\n\r");
        return -1;
    }
#endif

    netif_set_default(custom_netif);
    platform_enable_interrupts();
    netif_set_up(custom_netif);

#if (LWIP_IPV6 == 0)
#if (LWIP_DHCP==1)
    /* DHCP логика (если нужно) */
    dhcp_start(custom_netif);
    dhcp_timoutcntr = 24;

    while(((custom_netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0))
        xemacif_input(custom_netif);

    if (dhcp_timoutcntr <= 0) {
        if ((custom_netif->ip_addr.addr) == 0) {
            xil_printf("DHCP Timeout - using static IP\n\r");
            IP4_ADDR(&(custom_netif->ip_addr),  192, 168,   1, 10);
            IP4_ADDR(&(custom_netif->netmask), 255, 255, 255,  0);
            IP4_ADDR(&(custom_netif->gw),      192, 168,   1,  1);
        }
    }

    ipaddr.addr = custom_netif->ip_addr.addr;
    gw.addr = custom_netif->gw.addr;
    netmask.addr = custom_netif->netmask.addr;
#endif

    print_ip_settings(&ipaddr, &netmask, &gw);
#endif

    /* Запускаем наше TCP-приложение */
    start_custom_application();

    /* ГЛАВНЫЙ ЦИКЛ - ОБРАБАТЫВАЕМ И СЕТЬ И КОНСОЛЬ */
    while (1) {
        /* Таймеры для сетевого стека */
        if (TcpFastTmrFlag) {
            tcp_fasttmr();
            TcpFastTmrFlag = 0;
        }
        if (TcpSlowTmrFlag) {
            tcp_slowtmr();
            TcpSlowTmrFlag = 0;
        }

        /* Обработка сетевых пакетов */
        xemacif_input(custom_netif);

        /* ОБРАБОТКА КОНСОЛИ */
        console_process();
    }

    cleanup_platform();
    return 0;
}
