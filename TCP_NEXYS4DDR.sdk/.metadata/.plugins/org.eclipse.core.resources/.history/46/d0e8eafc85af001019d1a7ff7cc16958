#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <winsock2.h>
#include <windows.h>

#pragma comment(lib, "ws2_32.lib")

#define BOARD_IP "192.168.1.10"
#define BOARD_PORT 12345
#define BUFFER_SIZE 1024

void print_menu() {
    printf("\n=============================================\n");
    printf("    –ö–õ–ò–ï–ù–¢ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–¢–û–ô NEXYS 4 DDR\n");
    printf("=============================================\n");
    printf("–ö–æ–º–∞–Ω–¥—ã:\n");
    printf("  <—Å–ª–æ–≤–æ>  - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –Ω–∞ –ø–ª–∞—Ç—É\n");
    printf("  test     - –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä\n");
    printf("  clear    - –û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω\n");
    printf("  quit     - –í—ã—Ö–æ–¥\n");
    printf("=============================================\n");
}

int send_to_board(SOCKET sock, const char* word, char* response) {
    char buffer[BUFFER_SIZE];

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
    sprintf(buffer, "%s\n", word);
    if (send(sock, buffer, strlen(buffer), 0) == SOCKET_ERROR) {
        printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏!\n");
        return 0;
    }

    printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '%s'\n", word);

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    int bytes_received = recv(sock, buffer, BUFFER_SIZE - 1, 0);
    if (bytes_received > 0) {
        buffer[bytes_received] = '\0';
        strcpy(response, buffer);
        printf("–ü–æ–ª—É—á–µ–Ω–æ: '%s'\n", response);
        return 1;
    }

    return 0;
}

void test_suite(SOCKET sock) {
    char* test_words[] = {
        "Hello", "World", "TEST", "MiXeD",
        "123Numbers", "Python", "Socket", NULL
    };

    printf("\n=== –¢–ï–°–¢–û–í–´–ô –ù–ê–ë–û–† ===\n");

    for (int i = 0; test_words[i] != NULL; i++) {
        char response[BUFFER_SIZE];
        if (send_to_board(sock, test_words[i], response)) {
            printf("‚úÖ '%s' -> '%s'\n", test_words[i], response);
        } else {
            printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ '%s'\n", test_words[i]);
        }
        Sleep(500); // –ü–∞—É–∑–∞ 500–º—Å
    }

    printf("=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===\n");
}

int main() {
    WSADATA wsaData;
    SOCKET client_socket;
    struct sockaddr_in server_addr;
    char input[256];
    char response[BUFFER_SIZE];

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Winsock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        printf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Winsock!\n");
        return 1;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–∞
    client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket == INVALID_SOCKET) {
        printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–∫–µ—Ç–∞!\n");
        WSACleanup();
        return 1;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(BOARD_PORT);
    server_addr.sin_addr.s_addr = inet_addr(BOARD_IP);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–ª–∞—Ç–µ
    printf("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–ª–∞—Ç–µ %s:%d...\n", BOARD_IP, BOARD_PORT);
    if (connect(client_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == SOCKET_ERROR) {
        printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–ª–∞—Ç–µ!\n");
        closesocket(client_socket);
        WSACleanup();
        return 1;
    }

    printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–ª–∞—Ç–µ!\n");

    print_menu();

    // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while (1) {
        printf("\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É: ");
        fgets(input, sizeof(input), stdin);

        // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        input[strcspn(input, "\n")] = 0;

        if (strlen(input) == 0) continue;

        if (strcmp(input, "quit") == 0 || strcmp(input, "exit") == 0) {
            break;
        }
        else if (strcmp(input, "test") == 0) {
            test_suite(client_socket);
        }
        else if (strcmp(input, "clear") == 0) {
            system("cls");
            print_menu();
        }
        else if (strcmp(input, "help") == 0) {
            print_menu();
        }
        else {
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤–∞ –Ω–∞ –ø–ª–∞—Ç—É
            if (send_to_board(client_socket, input, response)) {
                printf("üîÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: '%s' -> '%s'\n", input, response);
            }
        }
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    closesocket(client_socket);
    WSACleanup();
    printf("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n");

    return 0;
}
